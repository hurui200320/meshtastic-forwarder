name: meshtastic-forwarder
services:
  # This is the server that expose meshtastic serial interface to web.
  # Deploy this to device connected to the meshtastic node.
  # My setup: a spare Raspberry Pi 5 connected with Wi-Fi
  server:
    image: ghcr.io/hurui200320/meshtastic-forwarder-server:master
    build:
      context: .
      dockerfile: mf-server.Dockerfile
    # for dev, change this to build
    pull_policy: always
    environment:
      - TZ=Asia/Shanghai
      - MESHTASTIC_SERVER_RWTOKENS=dev-token
      # should match the device below
      - MESHTASTIC_CLIENT_PORTURI=serial:///dev/ttyACM0
    devices:
      - /dev/ttyACM0
    restart: on-failure
    labels:
      mf-autoheal-app: true

  # This is the reverse proxy for gemini.
  # The gemini sdk itself doesn't support proxy setting,
  # thus we need caddy to send request to gemini api backend
  # while using our proxy.
  gemini-proxy:
    image: caddy:2
    volumes:
      # the `Caddyfile` lives here
      - "./caddy-conf:/etc/caddy"
      - "caddy-data:/data"
    environment:
      # only the HTTP_PROXY works, no others like HTTPS_PROXY
      - HTTP_PROXY=http://10.233.1.4:2080
    restart: always

  client:
    image: ghcr.io/hurui200320/meshtastic-forwarder-client:master
    build:
      context: .
      dockerfile: mf-client.Dockerfile
    # for dev, change this to build
    pull_policy: always
    environment:
      - TZ=Asia/Shanghai
      # reverse proxy
      - GOOGLE_GEMINI_BASE_URL=http://gemini-proxy
      - MESHTASTIC_CLIENT_BASEURL=server:8080
      - MESHTASTIC_CLIENT_TOKEN=dev-token
      - MESHTASTIC_CLIENT_ENABLETLS=false
      # enable debug reply on primary channel
      - MESHTASTIC_CLIENT_FEATURES_DEBUGREPLY_PRIMARYCHANNEL_ENABLED=true
      # enable gemini on private chat (dm)
      - MESHTASTIC_CLIENT_FEATURES_GEMINI_PRIVATECHAT_ENABLED=true
    # Read the following env from secrets file:
    # + GOOGLE_API_KEY, required for gemini api usage
    env_file: secrets.env
    depends_on:
      server:
        condition: service_healthy
      gemini-proxy:
        condition: service_started
    restart: always
    labels:
      mf-autoheal-app: true

  # a monitor service to restart container when it is marked as unhealthy.
  # docker should do this, but they failed to deliver such a feature.
  # shame on them.
  autoheal:
    deploy:
      replicas: 1
    environment:
      AUTOHEAL_CONTAINER_LABEL: mf-autoheal-app
    image: willfarrell/autoheal:latest
    network_mode: none
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  caddy-data:
